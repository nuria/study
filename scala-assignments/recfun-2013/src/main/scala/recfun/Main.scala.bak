package recfun
import common._
import scala.collection.mutable

object Main {
  def main(args: Array[String]) {
    //println("Pascal's Triangle")
    //for (row <- 0 to 10) {
    //for (col <- 0 to row)
    //print(pascal(col, row) + " ")
    //println()
    //}
   countChange(4, List(1, 2))
   countChange(4, List(1, 2,3))
    

  }

  /**
   * Exercise 1.Pascal triangle
   */
  def pascal(c: Int, r: Int): Int =
    if (r == 0) 1
    else if (c == 0) 1
    else if (c == r) 1
    else pascal(c - 1, r - 1) + pascal(c, r - 1)

  /**
   * Exercise 2
   */
  def balance(chars: List[Char]): Boolean = ???

  /**
   * Exercise 3
   */
  def countChange(money: Int, coins: List[Int]): Int = {
    if (money == 0) 0
    else if (coins.isEmpty) 0
    var sequences = mutable.Set[String]()
    coins.sorted
    countChangeSeq(money, coins, "");

    def countChangeSeq(money: Int, coins: List[Int], sequence: String): Unit = {

      val usefulCoins = coins map { _.toInt } filter { _ <= money }

      if (usefulCoins.length == 1) {

        var newSequence: String = sequence.concat(usefulCoins(0).toString).toList.sorted.mkString
        if (!sequences.contains(newSequence)) {
          sequences.add(newSequence)
        }
      } else {
        for (c <- usefulCoins) {
          if (money - c == 0) {
            var newSequence: String = sequence.concat(c.toString).toList.sorted.mkString
            if (!sequences.contains(newSequence)) {
              sequences.add(newSequence)
            }

          } else {
            countChangeSeq(money - c, usefulCoins, sequence.concat(c.toString))
          }
        }

      }
    }

   // println(sequences)
    sequences.size
  }
}
